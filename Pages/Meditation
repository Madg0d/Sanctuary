import React, { useState, useEffect, useRef } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Play, Pause, RotateCcw, Brain, History } from "lucide-react";
import { Note } from "@/entities/Note";

const meditationTypes = [
    { id: 'mindfulness', name: 'Mindfulness', description: 'Focus on your breath and observe your thoughts without judgment.' },
    { id: 'body_scan', name: 'Body Scan', description: 'Bring awareness to different parts of your body, noticing any sensations.' },
    { id: 'loving_kindness', name: 'Loving-Kindness', description: 'Cultivate feelings of warmth, kindness, and compassion for yourself and others.' },
    { id: 'transcendental', name: 'Mantra', description: 'Silently repeat a calming word or phrase to prevent distracting thoughts.' },
];

export default function Meditation() {
    const [selectedType, setSelectedType] = useState(meditationTypes[0]);
    const [duration, setDuration] = useState(10); // in minutes
    const [time, setTime] = useState(duration * 60);
    const [isRunning, setIsRunning] = useState(false);
    const [sessions, setSessions] = useState([]);
    const intervalRef = useRef(null);

    useEffect(() => {
        loadSessions();
    }, []);

    useEffect(() => {
        setTime(duration * 60);
    }, [duration]);

    useEffect(() => {
        if (isRunning) {
            intervalRef.current = setInterval(() => {
                setTime(prev => {
                    if (prev <= 1) {
                        clearInterval(intervalRef.current);
                        setIsRunning(false);
                        saveSession();
                        return 0;
                    }
                    return prev - 1;
                });
            }, 1000);
        } else {
            clearInterval(intervalRef.current);
        }
        return () => clearInterval(intervalRef.current);
    }, [isRunning]);

    const loadSessions = async () => {
        try {
            const noteData = await Note.filter({ title: { $regex: "^MEDITATION:" } }, "-updated_date");
            const parsedSessions = noteData.map(note => ({
                id: note.id,
                ...JSON.parse(note.content)
            })).sort((a, b) => new Date(b.date) - new Date(a.date));
            setSessions(parsedSessions);
        } catch (error) {
            console.error("Failed to load sessions:", error);
        }
    };

    const saveSession = async () => {
        const sessionData = {
            type: selectedType.name,
            duration: duration, // minutes
            date: new Date().toISOString(),
        };
        const title = `MEDITATION: ${sessionData.type} - ${new Date(sessionData.date).toLocaleString()}`;
        try {
            await Note.create({ title, content: JSON.stringify(sessionData) });
            loadSessions(); // Refresh session list
        } catch (error) {
            console.error("Failed to save session:", error);
        }
    };

    const formatTime = (seconds) => {
        const mins = Math.floor(seconds / 60);
        const secs = seconds % 60;
        return `${String(mins).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;
    };

    const handleStartPause = () => {
        setIsRunning(!isRunning);
    };

    const handleReset = () => {
        setIsRunning(false);
        setTime(duration * 60);
    };

    return (
        <div className="max-w-4xl mx-auto">
            <div className="mb-8">
                <h1 className="text-3xl font-bold mb-2 tracking-wider text-white">MEDITATION</h1>
                <p className="text-zinc-400 text-sm">Find your inner peace</p>
            </div>

            <div className="grid lg:grid-cols-2 gap-8">
                {/* Timer & Controls */}
                <Card className="bg-zinc-900 border-zinc-800">
                    <CardHeader>
                        <CardTitle className="flex items-center space-x-2 text-white">
                            <Brain className="w-5 h-5" />
                            <span>Meditation Timer</span>
                        </CardTitle>
                    </CardHeader>
                    <CardContent className="text-center">
                        <div className="mb-6">
                            <h3 className="text-xl font-medium text-white">{selectedType.name}</h3>
                            <p className="text-zinc-400 text-sm">{selectedType.description}</p>
                        </div>
                        
                        <div className="text-7xl font-mono font-bold mb-6 text-white">{formatTime(time)}</div>

                        <div className="mb-8">
                            <label className="block text-sm text-zinc-400 mb-2">Duration (minutes)</label>
                            <div className="flex justify-center space-x-2">
                                {[5, 10, 15, 20, 30].map(d => (
                                    <Button
                                        key={d}
                                        onClick={() => !isRunning && setDuration(d)}
                                        disabled={isRunning}
                                        className={`${
                                            duration === d 
                                                ? 'bg-white text-black' 
                                                : 'bg-zinc-800 text-white hover:bg-zinc-700'
                                        }`}
                                    >
                                        {d}
                                    </Button>
                                ))}
                            </div>
                        </div>

                        <div className="flex justify-center space-x-4">
                            <Button
                                onClick={handleStartPause}
                                className="bg-white text-black hover:bg-zinc-200 px-8 py-3 w-32"
                            >
                                {isRunning ? <Pause className="w-6 h-6" /> : <Play className="w-6 h-6" />}
                            </Button>
                            <Button
                                onClick={handleReset}
                                variant="outline"
                                className="border-zinc-700 text-zinc-300 hover:bg-zinc-800 hover:text-white px-8 py-3"
                            >
                                <RotateCcw className="w-6 h-6" />
                            </Button>
                        </div>
                    </CardContent>
                </Card>

                {/* Types & History */}
                <div className="space-y-8">
                    <Card className="bg-zinc-900 border-zinc-800">
                        <CardHeader>
                            <CardTitle className="text-white">Meditation Types</CardTitle>
                        </CardHeader>
                        <CardContent className="space-y-3">
                            {meditationTypes.map(type => (
                                <button
                                    key={type.id}
                                    onClick={() => !isRunning && setSelectedType(type)}
                                    disabled={isRunning}
                                    className={`w-full text-left p-3 rounded-lg transition-colors ${
                                        selectedType.id === type.id 
                                            ? 'bg-zinc-700' 
                                            : 'bg-zinc-800 hover:bg-zinc-700'
                                    }`}
                                >
                                    <h4 className="font-medium text-white">{type.name}</h4>
                                </button>
                            ))}
                        </CardContent>
                    </Card>

                    <Card className="bg-zinc-900 border-zinc-800">
                        <CardHeader>
                             <CardTitle className="flex items-center space-x-2 text-white">
                                <History className="w-5 h-5" />
                                <span>Session History</span>
                            </CardTitle>
                        </CardHeader>
                        <CardContent>
                            {sessions.length > 0 ? (
                                <div className="space-y-3 max-h-48 overflow-y-auto">
                                    {sessions.map(session => (
                                        <div key={session.id} className="flex justify-between items-center text-sm p-2 bg-zinc-800 rounded">
                                            <div>
                                                <p className="font-medium text-white">{session.type}</p>
                                                <p className="text-xs text-zinc-400">{new Date(session.date).toLocaleDateString()}</p>
                                            </div>
                                            <p className="text-zinc-300">{session.duration} min</p>
                                        </div>
                                    ))}
                                </div>
                            ) : (
                                <p className="text-zinc-400 text-center text-sm py-4">No sessions recorded yet.</p>
                            )}
                        </CardContent>
                    </Card>
                </div>
            </div>
        </div>
    );
}

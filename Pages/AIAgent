import React, { useState, useEffect } from "react";
import { AIChatSession } from "@/entities/AIChatSession";
import { User } from "@/entities/User";
import { InvokeLLM } from "@/integrations/Core";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Bot, Plus, Send, MessageSquare, Edit3, Check, X, Trash2 } from "lucide-react";

export default function AIAgent() {
    const [sessions, setSessions] = useState([]);
    const [currentSession, setCurrentSession] = useState(null);
    const [newMessage, setNewMessage] = useState("");
    const [loading, setLoading] = useState(false);
    const [editingSessionId, setEditingSessionId] = useState(null);
    const [editingTitle, setEditingTitle] = useState("");
    const [currentUser, setCurrentUser] = useState(null);

    useEffect(() => {
        loadCurrentUser();
        loadSessions();
    }, []);

    const loadCurrentUser = async () => {
        try {
            const user = await User.me();
            setCurrentUser(user);
        } catch (error) {
            console.error("Failed to load user:", error);
        }
    };

    const loadSessions = async () => {
        try {
            const sessionData = await AIChatSession.list("-updated_date");
            setSessions(sessionData);
        } catch (error) {
            console.error("Failed to load sessions:", error);
        }
    };

    const createNewSession = async () => {
        const newSession = await AIChatSession.create({
            title: `Chat ${new Date().toLocaleDateString()}`,
            messages: [],
            is_active: true
        });
        
        await loadSessions();
        setCurrentSession(newSession);
    };

    const startEditingTitle = (session) => {
        // Only allow editing if current user created the session
        if (currentUser && session.created_by === currentUser.email) {
            setEditingSessionId(session.id);
            setEditingTitle(session.title);
        }
    };

    const saveTitle = async () => {
        if (!editingTitle.trim()) return;
        
        await AIChatSession.update(editingSessionId, { title: editingTitle });
        setEditingSessionId(null);
        setEditingTitle("");
        await loadSessions();
        
        if (currentSession && currentSession.id === editingSessionId) {
            setCurrentSession(prev => ({ ...prev, title: editingTitle }));
        }
    };

    const cancelEditing = () => {
        setEditingSessionId(null);
        setEditingTitle("");
    };

    const deleteSession = async (sessionId) => {
        if (confirm("Are you sure you want to delete this chat?")) {
            await AIChatSession.delete(sessionId);
            await loadSessions();
            if (currentSession && currentSession.id === sessionId) {
                setCurrentSession(null);
            }
        }
    };

    const sendMessage = async () => {
        if (!newMessage.trim() || !currentSession) return;

        const userMessage = {
            role: "user",
            content: newMessage,
            timestamp: new Date().toISOString()
        };

        const updatedMessages = [...currentSession.messages, userMessage];
        setCurrentSession(prev => ({ ...prev, messages: updatedMessages }));
        setNewMessage("");
        setLoading(true);

        try {
            // Build conversation context with Escape system prompt
            const escapeContext = `You are an AI assistant integrated into "Escape" - a digital sanctuary and productivity platform designed to help users disconnect from digital distractions and focus on deep work. 

Escape includes tools for:
- Pomodoro timers and focus sessions
- Digital detox tracking
- Meditation and breathing exercises
- Minimalist note-taking and journaling
- Task management and goal setting
- Ambient sounds for concentration
- Password management
- Weather and news (curated, not overwhelming)
- Simple finance tracking
- Book reading logs
- Basic calculator and browser

The platform emphasizes minimalism, mindfulness, and intentional technology use. Users come here to escape the chaos of modern digital life and create a focused, peaceful workspace.

When helping users, consider this context and encourage practices that align with digital wellness, focus, and intentional productivity.`;

            const conversationHistory = [
                { role: "system", content: escapeContext },
                ...updatedMessages.map(msg => ({ role: msg.role, content: msg.content }))
            ];

            const response = await InvokeLLM({
                prompt: `Here is our conversation history: ${JSON.stringify(conversationHistory)}. Please respond as the AI assistant in this conversation.`
            });

            const assistantMessage = {
                role: "assistant",
                content: response,
                timestamp: new Date().toISOString()
            };

            const finalMessages = [...updatedMessages, assistantMessage];
            
            await AIChatSession.update(currentSession.id, { messages: finalMessages });
            setCurrentSession(prev => ({ ...prev, messages: finalMessages }));
            
        } catch (error) {
            console.error("Failed to get AI response:", error);
        }
        
        setLoading(false);
    };

    return (
        <div className="max-w-7xl mx-auto">
            <div className="mb-8">
                <h1 className="text-3xl font-bold mb-2 tracking-wider text-white">AI AGENT</h1>
                <p className="text-zinc-400 text-sm">Your intelligent assistant</p>
            </div>

            <div className="grid lg:grid-cols-4 gap-6">
                {/* Chat Sessions List */}
                <div className="lg:col-span-1">
                    <div className="bg-zinc-900 rounded-2xl p-4 border border-zinc-800">
                        <div className="flex items-center justify-between mb-4">
                            <h3 className="font-bold text-sm tracking-wide text-white">CHATS</h3>
                            <Button
                                onClick={createNewSession}
                                size="sm"
                                className="bg-white text-black hover:bg-zinc-200"
                            >
                                <Plus className="w-3 h-3" />
                            </Button>
                        </div>

                        <div className="space-y-2 max-h-96 overflow-y-auto">
                            {sessions.map(session => {
                                const canEdit = currentUser && session.created_by === currentUser.email;
                                
                                return (
                                    <div
                                        key={session.id}
                                        className={`
                                            group p-3 rounded-lg cursor-pointer transition-all duration-200 flex items-center justify-between
                                            ${currentSession?.id === session.id 
                                                ? 'bg-zinc-800 border border-zinc-600' 
                                                : 'bg-zinc-800 hover:bg-zinc-700'
                                            }
                                        `}
                                    >
                                        <div className="flex-1 min-w-0" onClick={() => setCurrentSession(session)}>
                                            {editingSessionId === session.id ? (
                                                <div className="flex items-center space-x-2" onClick={(e) => e.stopPropagation()}>
                                                    <Input
                                                        value={editingTitle}
                                                        onChange={(e) => setEditingTitle(e.target.value)}
                                                        className="bg-zinc-700 border-zinc-600 text-white text-xs h-6"
                                                        onKeyPress={(e) => e.key === 'Enter' && saveTitle()}
                                                    />
                                                    <Button
                                                        onClick={saveTitle}
                                                        size="sm"
                                                        className="h-6 w-6 p-0 bg-green-600 hover:bg-green-700"
                                                    >
                                                        <Check className="w-3 h-3" />
                                                    </Button>
                                                    <Button
                                                        onClick={cancelEditing}
                                                        size="sm"
                                                        className="h-6 w-6 p-0 bg-red-600 hover:bg-red-700"
                                                    >
                                                        <X className="w-3 h-3" />
                                                    </Button>
                                                </div>
                                            ) : (
                                                <div className="font-medium text-sm text-white truncate">{session.title}</div>
                                            )}
                                            <div className="text-xs text-zinc-400">
                                                {session.messages.length} messages
                                            </div>
                                        </div>
                                        {editingSessionId !== session.id && canEdit && (
                                            <div className="flex space-x-1 opacity-0 group-hover:opacity-100 transition-opacity">
                                                <Button
                                                    onClick={(e) => {
                                                        e.stopPropagation();
                                                        startEditingTitle(session);
                                                    }}
                                                    size="sm"
                                                    variant="ghost"
                                                    className="h-6 w-6 p-0 text-zinc-400 hover:text-white"
                                                >
                                                    <Edit3 className="w-3 h-3" />
                                                </Button>
                                                <Button
                                                    onClick={(e) => {
                                                        e.stopPropagation();
                                                        deleteSession(session.id);
                                                    }}
                                                    size="sm"
                                                    variant="ghost"
                                                    className="h-6 w-6 p-0 text-zinc-400 hover:text-red-400"
                                                >
                                                    <Trash2 className="w-3 h-3" />
                                                </Button>
                                            </div>
                                        )}
                                    </div>
                                );
                            })}
                        </div>
                    </div>
                </div>

                {/* Chat Area */}
                <div className="lg:col-span-3">
                    {currentSession ? (
                        <div className="bg-zinc-900 rounded-2xl border border-zinc-800 h-[600px] flex flex-col">
                            {/* Chat Header */}
                            <div className="p-4 border-b border-zinc-800">
                                <h3 className="font-bold text-white">{currentSession.title}</h3>
                                <p className="text-sm text-zinc-400">AI Assistant Chat</p>
                            </div>

                            {/* Messages */}
                            <div className="flex-1 p-4 overflow-y-auto space-y-4">
                                {currentSession.messages.map((message, index) => (
                                    <div key={index} className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}>
                                        <div className={`max-w-[80%] p-3 rounded-lg ${
                                            message.role === 'user' 
                                                ? 'bg-zinc-700 text-white' 
                                                : 'bg-zinc-800 text-white'
                                        }`}>
                                            <div className="whitespace-pre-wrap">{message.content}</div>
                                            <div className="text-xs text-zinc-400 mt-1">
                                                {new Date(message.timestamp).toLocaleTimeString()}
                                            </div>
                                        </div>
                                    </div>
                                ))}
                                {loading && (
                                    <div className="flex justify-start">
                                        <div className="bg-zinc-800 p-3 rounded-lg">
                                            <div className="flex space-x-1">
                                                <div className="w-2 h-2 bg-zinc-400 rounded-full animate-bounce"></div>
                                                <div className="w-2 h-2 bg-zinc-400 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
                                                <div className="w-2 h-2 bg-zinc-400 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
                                            </div>
                                        </div>
                                    </div>
                                )}
                            </div>

                            {/* Message Input */}
                            <div className="p-4 border-t border-zinc-800">
                                <div className="flex space-x-2">
                                    <Textarea
                                        value={newMessage}
                                        onChange={(e) => setNewMessage(e.target.value)}
                                        onKeyPress={(e) => e.key === 'Enter' && !e.shiftKey && (e.preventDefault(), sendMessage())}
                                        placeholder="Ask me anything..."
                                        className="bg-zinc-800 border-zinc-700 text-white resize-none"
                                        rows={2}
                                    />
                                    <Button
                                        onClick={sendMessage}
                                        disabled={loading || !newMessage.trim()}
                                        className="bg-white text-black hover:bg-zinc-200"
                                    >
                                        <Send className="w-4 h-4" />
                                    </Button>
                                </div>
                            </div>
                        </div>
                    ) : (
                        <div className="bg-zinc-900 rounded-2xl p-12 border border-zinc-800 text-center">
                            <Bot className="w-12 h-12 text-zinc-600 mx-auto mb-4" />
                            <h3 className="text-xl font-bold mb-2 text-white">Welcome to AI Agent</h3>
                            <p className="text-zinc-400 mb-6">Create a new chat or select an existing one to start conversing with your AI assistant.</p>
                            <Button
                                onClick={createNewSession}
                                className="bg-white text-black hover:bg-zinc-200"
                            >
                                <Plus className="w-4 h-4 mr-2" />
                                Start New Chat
                            </Button>
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
}

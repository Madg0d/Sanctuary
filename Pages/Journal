
import React, { useState, useEffect } from "react";
import { Note } from "@/entities/Note";
import { InvokeLLM } from "@/integrations/Core";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { BookOpen, Plus, Calendar, Search, Sparkles, Edit3, Save, X } from "lucide-react";

export default function Journal() {
    const [entries, setEntries] = useState([]);
    const [selectedEntry, setSelectedEntry] = useState(null);
    const [showNewEntry, setShowNewEntry] = useState(false);
    const [isEditing, setIsEditing] = useState(false);
    const [searchTerm, setSearchTerm] = useState("");
    const [generatingPrompt, setGeneratingPrompt] = useState(false);
    const [newEntry, setNewEntry] = useState({
        title: "",
        content: "",
        mood: "neutral",
        tags: ""
    });

    const moods = [
        { value: "great", label: "Great", emoji: "😄", color: "text-green-400" },
        { value: "good", label: "Good", emoji: "🙂", color: "text-blue-400" },
        { value: "neutral", label: "Neutral", emoji: "😐", color: "text-zinc-400" },
        { value: "sad", label: "Sad", emoji: "😢", color: "text-yellow-400" },
        { value: "stressed", label: "Stressed", emoji: "😰", color: "text-red-400" }
    ];

    useEffect(() => {
        loadEntries();
    }, []);

    const loadEntries = async () => {
        try {
            const noteData = await Note.filter({ title: { $regex: "^JOURNAL:" } }, "-updated_date");
            const parsedEntries = noteData.map(note => ({
                id: note.id,
                date: note.created_date,
                ...JSON.parse(note.content)
            }));
            setEntries(parsedEntries);
        } catch (error) {
            console.error("Failed to load entries:", error);
        }
    };

    const saveEntry = async () => {
        if (!newEntry.title || !newEntry.content) return;

        try {
            const entryData = {
                ...newEntry,
                dateCreated: new Date().toISOString(),
                tags: newEntry.tags.split(',').map(tag => tag.trim()).filter(tag => tag)
            };
            
            const title = `JOURNAL: ${entryData.title} - ${new Date().toLocaleDateString()}`;
            
            await Note.create({
                title,
                content: JSON.stringify(entryData)
            });
            
            setNewEntry({
                title: "",
                content: "",
                mood: "neutral",
                tags: ""
            });
            
            setShowNewEntry(false);
            loadEntries();
        } catch (error) {
            console.error("Failed to save entry:", error);
        }
    };

    const updateEntry = async () => {
        if (!selectedEntry) return;

        try {
            const updatedData = {
                ...selectedEntry,
                tags: typeof selectedEntry.tags === 'string' 
                    ? selectedEntry.tags.split(',').map(tag => tag.trim()).filter(tag => tag)
                    : selectedEntry.tags
            };
            
            await Note.update(selectedEntry.id, {
                title: `JOURNAL: ${selectedEntry.title} - ${new Date(selectedEntry.date).toLocaleDateString()}`,
                content: JSON.stringify(updatedData)
            });
            
            setIsEditing(false);
            loadEntries();
        } catch (error) {
            console.error("Failed to update entry:", error);
        }
    };

    const generatePrompt = async () => {
        setGeneratingPrompt(true);
        try {
            const result = await InvokeLLM({
                prompt: "Generate a thoughtful journaling prompt that encourages self-reflection, gratitude, or personal growth. Make it open-ended and inspiring.",
                response_json_schema: {
                    type: "object",
                    properties: {
                        prompt: { type: "string" },
                        title: { type: "string" }
                    }
                }
            });
            
            setNewEntry(prev => ({
                ...prev,
                title: result.title || "Daily Reflection",
                content: `${result.prompt}\n\n`
            }));
        } catch (error) {
            console.error("Failed to generate prompt:", error);
        } finally {
            setGeneratingPrompt(false);
        }
    };

    const filteredEntries = entries.filter(entry =>
        entry.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        entry.content.toLowerCase().includes(searchTerm.toLowerCase()) ||
        (entry.tags && entry.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase())))
    );

    const getMoodInfo = (mood) => {
        return moods.find(m => m.value === mood) || moods[2];
    };

    const getTodayEntry = () => {
        const today = new Date().toDateString();
        return entries.find(entry => new Date(entry.date).toDateString() === today);
    };

    const todaysEntry = getTodayEntry();

    return (
        <div className="max-w-6xl mx-auto">
            <div className="mb-8">
                <h1 className="text-3xl font-bold mb-2 tracking-wider text-white">JOURNAL</h1>
                <p className="text-zinc-400 text-sm">Reflect on your thoughts and experiences</p>
            </div>

            <div className="grid lg:grid-cols-4 gap-8">
                {/* Sidebar */}
                <div className="lg:col-span-1">
                    <div className="space-y-4">
                        {/* Search */}
                        <div className="relative">
                            <Search className="absolute left-3 top-3 w-4 h-4 text-zinc-400" />
                            <Input
                                placeholder="Search entries..."
                                value={searchTerm}
                                onChange={(e) => setSearchTerm(e.target.value)}
                                className="pl-10 bg-zinc-900 border-zinc-700 text-white"
                            />
                        </div>

                        {/* New Entry Button */}
                        <Button
                            onClick={() => setShowNewEntry(true)}
                            className="w-full bg-white text-black hover:bg-zinc-200"
                        >
                            <Plus className="w-4 h-4 mr-2" />
                            New Entry
                        </Button>

                        {/* Today's Entry Quick Access */}
                        {todaysEntry && (
                            <Card className="bg-zinc-900 border-zinc-700">
                                <CardHeader>
                                    <CardTitle className="text-sm text-white">Today's Entry</CardTitle>
                                </CardHeader>
                                <CardContent>
                                    <button
                                        onClick={() => setSelectedEntry(todaysEntry)}
                                        className="w-full text-left p-2 bg-zinc-800 rounded hover:bg-zinc-700 transition-colors"
                                    >
                                        <div className="font-medium text-sm text-white">{todaysEntry.title}</div>
                                        <div className="text-xs text-zinc-400 mt-1">
                                            {getMoodInfo(todaysEntry.mood).emoji} {getMoodInfo(todaysEntry.mood).label}
                                        </div>
                                    </button>
                                </CardContent>
                            </Card>
                        )}

                        {/* Recent Entries */}
                        <Card className="bg-zinc-900 border-zinc-800">
                            <CardHeader>
                                <CardTitle className="text-sm text-white">Recent Entries</CardTitle>
                            </CardHeader>
                            <CardContent>
                                <div className="space-y-2 max-h-64 overflow-y-auto">
                                    {filteredEntries.slice(0, 10).map(entry => {
                                        const moodInfo = getMoodInfo(entry.mood);
                                        return (
                                            <button
                                                key={entry.id}
                                                onClick={() => setSelectedEntry(entry)}
                                                className={`
                                                    w-full text-left p-2 rounded transition-colors
                                                    ${selectedEntry?.id === entry.id 
                                                        ? 'bg-zinc-700 border border-zinc-600' 
                                                        : 'bg-zinc-800 hover:bg-zinc-700'
                                                    }
                                                `}
                                            >
                                                <div className="font-medium text-sm text-white">{entry.title}</div>
                                                <div className="text-xs text-zinc-400 mt-1 flex items-center justify-between">
                                                    <span>{new Date(entry.date).toLocaleDateString()}</span>
                                                    <span>{moodInfo.emoji}</span>
                                                </div>
                                            </button>
                                        );
                                    })}
                                </div>
                            </CardContent>
                        </Card>
                    </div>
                </div>

                {/* Main Content */}
                <div className="lg:col-span-3">
                    {selectedEntry ? (
                        <Card className="bg-zinc-900 border-zinc-800">
                            <CardHeader>
                                <div className="flex items-center justify-between">
                                    <div className="flex items-center space-x-3">
                                        <BookOpen className="w-5 h-5 text-zinc-400" />
                                        <div>
                                            <CardTitle className="text-white">{selectedEntry.title}</CardTitle>
                                            <div className="flex items-center space-x-2 text-sm text-zinc-400 mt-1">
                                                <Calendar className="w-3 h-3" />
                                                <span>{new Date(selectedEntry.date).toLocaleDateString()}</span>
                                                <span className={getMoodInfo(selectedEntry.mood).color}>
                                                    {getMoodInfo(selectedEntry.mood).emoji} {getMoodInfo(selectedEntry.mood).label}
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                    <div className="flex space-x-2">
                                        {isEditing ? (
                                            <>
                                                <Button
                                                    onClick={updateEntry}
                                                    size="sm"
                                                    className="bg-white text-black hover:bg-zinc-200"
                                                >
                                                    <Save className="w-4 h-4" />
                                                </Button>
                                                <Button
                                                    onClick={() => setIsEditing(false)}
                                                    size="sm"
                                                    variant="outline"
                                                    className="border-zinc-700 text-zinc-300 hover:bg-zinc-800 hover:text-white"
                                                >
                                                    <X className="w-4 h-4" />
                                                </Button>
                                            </>
                                        ) : (
                                            <Button
                                                onClick={() => setIsEditing(true)}
                                                size="sm"
                                                variant="outline"
                                                className="border-zinc-700 text-zinc-300 hover:bg-zinc-800 hover:text-white"
                                            >
                                                <Edit3 className="w-4 h-4" />
                                            </Button>
                                        )}
                                    </div>
                                </div>
                            </CardHeader>
                            <CardContent>
                                {isEditing ? (
                                    <div className="space-y-4">
                                        <Input
                                            value={selectedEntry.title}
                                            onChange={(e) => setSelectedEntry(prev => ({ ...prev, title: e.target.value }))}
                                            className="bg-zinc-800 border-zinc-700 text-white"
                                        />
                                        <Textarea
                                            value={selectedEntry.content}
                                            onChange={(e) => setSelectedEntry(prev => ({ ...prev, content: e.target.value }))}
                                            className="bg-zinc-800 border-zinc-700 text-white min-h-96 resize-none"
                                        />
                                        <div className="grid grid-cols-2 gap-4">
                                            <select
                                                value={selectedEntry.mood}
                                                onChange={(e) => setSelectedEntry(prev => ({ ...prev, mood: e.target.value }))}
                                                className="bg-zinc-800 border border-zinc-700 text-white rounded-md p-2"
                                            >
                                                {moods.map(mood => (
                                                    <option key={mood.value} value={mood.value}>
                                                        {mood.emoji} {mood.label}
                                                    </option>
                                                ))}
                                            </select>
                                            <Input
                                                placeholder="Tags (comma separated)"
                                                value={Array.isArray(selectedEntry.tags) ? selectedEntry.tags.join(', ') : selectedEntry.tags || ''}
                                                onChange={(e) => setSelectedEntry(prev => ({ ...prev, tags: e.target.value }))}
                                                className="bg-zinc-800 border-zinc-700 text-white"
                                            />
                                        </div>
                                    </div>
                                ) : (
                                    <div>
                                        <div className="prose prose-invert max-w-none">
                                            <div className="whitespace-pre-wrap text-zinc-300 leading-relaxed">
                                                {selectedEntry.content}
                                            </div>
                                        </div>
                                        {selectedEntry.tags && selectedEntry.tags.length > 0 && (
                                            <div className="mt-6 pt-4 border-t border-zinc-800">
                                                <div className="flex flex-wrap gap-2">
                                                    {(Array.isArray(selectedEntry.tags) ? selectedEntry.tags : []).map((tag, index) => (
                                                        <span key={index} className="px-2 py-1 bg-zinc-800 text-zinc-300 text-xs rounded">
                                                            #{tag}
                                                        </span>
                                                    ))}
                                                </div>
                                            </div>
                                        )}
                                    </div>
                                )}
                            </CardContent>
                        </Card>
                    ) : (
                        <div className="bg-zinc-900 rounded-2xl p-12 border border-zinc-800 text-center">
                            <BookOpen className="w-12 h-12 text-zinc-600 mx-auto mb-4" />
                            <p className="text-zinc-400 mb-4">Select an entry to read, or create a new one</p>
                            <Button
                                onClick={() => setShowNewEntry(true)}
                                className="bg-white text-black hover:bg-zinc-200"
                            >
                                <Plus className="w-4 h-4 mr-2" />
                                Start Writing
                            </Button>
                        </div>
                    )}
                </div>
            </div>

            {/* New Entry Modal */}
            {showNewEntry && (
                <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 p-4">
                    <div className="bg-zinc-900 rounded-2xl p-6 w-full max-w-2xl border border-zinc-800 max-h-[90vh] overflow-y-auto">
                        <div className="flex items-center justify-between mb-6">
                            <h3 className="text-xl font-bold tracking-wide text-white">NEW JOURNAL ENTRY</h3>
                            <Button
                                onClick={generatePrompt}
                                disabled={generatingPrompt}
                                variant="outline"
                                className="border-zinc-700 text-zinc-300 hover:bg-zinc-800 hover:text-white"
                            >
                                <Sparkles className={`w-4 h-4 mr-2 ${generatingPrompt ? 'animate-spin' : ''}`} />
                                Prompt
                            </Button>
                        </div>
                        
                        <div className="space-y-4">
                            <Input
                                placeholder="Entry title"
                                value={newEntry.title}
                                onChange={(e) => setNewEntry(prev => ({ ...prev, title: e.target.value }))}
                                className="bg-zinc-800 border-zinc-700 text-white"
                            />
                            <Textarea
                                placeholder="Write your thoughts..."
                                value={newEntry.content}
                                onChange={(e) => setNewEntry(prev => ({ ...prev, content: e.target.value }))}
                                className="bg-zinc-800 border-zinc-700 text-white min-h-64 resize-none"
                            />
                            <div className="grid grid-cols-2 gap-4">
                                <select
                                    value={newEntry.mood}
                                    onChange={(e) => setNewEntry(prev => ({ ...prev, mood: e.target.value }))}
                                    className="bg-zinc-800 border border-zinc-700 text-white rounded-md p-2"
                                >
                                    {moods.map(mood => (
                                        <option key={mood.value} value={mood.value}>
                                            {mood.emoji} {mood.label}
                                        </option>
                                    ))}
                                </select>
                                <Input
                                    placeholder="Tags (comma separated)"
                                    value={newEntry.tags}
                                    onChange={(e) => setNewEntry(prev => ({ ...prev, tags: e.target.value }))}
                                    className="bg-zinc-800 border-zinc-700 text-white"
                                />
                            </div>
                        </div>
                        
                        <div className="flex justify-end space-x-3 mt-6">
                            <Button
                                onClick={() => setShowNewEntry(false)}
                                variant="outline"
                                className="border-zinc-700 text-zinc-300 hover:bg-zinc-800 hover:text-white"
                            >
                                Cancel
                            </Button>
                            <Button
                                onClick={saveEntry}
                                className="bg-white text-black hover:bg-zinc-200"
                            >
                                Save Entry
                            </Button>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
}
